class Input extends Component {
  state = {
    name: "",
    number: "",
    nameAlredyUse: false
  };

  handleChange = e => {
    this.setState({
      [e.target.name]: e.target.value
    });
  };

  handleSubmit = e => {
    e.preventDefault();
    const { name, number } = this.state;

    if (this.nameValidation(name, this.props.contacts)) return;

    this.props.addContact(name, number);

    this.setState({
      name: "",
      number: ""
    });
  };

  nameValidation = (adedName, contacts) => {
    const findedName = contacts.find(({ name }) => name === adedName);

    if (findedName) {
      this.setState({ nameAlredyUse: true });
      setTimeout(() => {
        this.setState({ nameAlredyUse: false });
      }, 1500);
    }

    return findedName;
  };

  render() {
    const { name, number, nameAlredyUse } = this.state;
    return (
      <>
        <CSSTransition
          in={nameAlredyUse}
          timeout={250}
          classNames={slideTransition}
          unmountOnExit
        >
          <span className={styles.alert}>Name alredy use</span>
        </CSSTransition>

        <form
          action="submit"
          onSubmit={this.handleSubmit}
          className={styles.form}
        >
          <h2 className={styles.text}>Name</h2>
          <input
            type="text"
            name="name"
            value={name}
            onChange={this.handleChange}
            className={styles.input}
          ></input>

          <h2 className={styles.text}>Number</h2>
          <input
            type="number"
            name="number"
            value={number}
            onChange={this.handleChange}
            className={styles.input}
          ></input>

          <br />
          <button type="submit" className={styles.button}>
            Add
          </button>
        </form>
      </>
    );
  }
}

export default Input;


export default class App extends Component {
  componentDidMount() {
    const contactsFromLS = localStorage.load("contacts");

    if (contactsFromLS) {
      this.setState({
        contacts: contactsFromLS
      });
    }

    this.setState({ logo: true });
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.contacts !== this.state.contacts) {
      localStorage.save("contacts", this.state.contacts);
    }
  }

  state = {
    contacts: [],
    filter: "",
    logo: false
  };

  changeFilter = e => {
    this.setState({
      filter: e.target.value
    });
  };

  addContact = (name, number) => {
    const { contacts } = this.state;
    const contactToAdd = { name, number, id: shortid.generate() };

    this.setState(state => ({
      contacts: [...contacts, contactToAdd]
    }));
  };

  deleteContact = targetId => {
    this.setState(state => ({
      contacts: state.contacts.filter(({ id }) => id !== targetId)
    }));
  };
  render() {
    const { contacts, filter, logo } = this.state;
    const filteredTasks = filterTasks(contacts, filter);
    return (
      <div className="wrapper">
        <div className="screen">
          <CSSTransition in={logo} timeout={500} classNames={slideTransition}>
            <h1 className={styles.phonebook}>Phonebook</h1>
          </CSSTransition>
          <Input addContact={this.addContact} contacts={contacts} />

          <Filter
            value={filter}
            onChangeFilter={this.changeFilter}
            tasks={filteredTasks}
            ressetFilter={this.ressetFilter}
          />
          <ContactList contacts={filteredTasks} onDelete={this.deleteContact} />
        </div>
      </div>
    );
  }
}
